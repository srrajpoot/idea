c
token = encode(account.id)
n
c
token = AccountsController.new.encode(account.id)
n
token = AccountsController.new.encode(account.id)
n
c
token = AccountsController.encode(account.id)
token = AccountsController.new.encode(account.id)
token = encode(account.id)
n
c
self.current_request_id = old_request_id
n
token = encode(account.id)
token = Account.encode(account.id)
n
account.present? && account.password == password
n
account = Account.find_by(email: email)
n
password = params[:data][:attributes][:password]
email = params[:data][:attributes][:email].downcase
email
c
n
token = encode(account.id)
 token = Account.encode(account.id)
n
account.present? && account.password == password
n
c
n
token = Account.encode(account.id)
token = encode(account.id)
encode(account.id)
n
account.present? && account.password == password
n
account = Account.find_by(email: email)
n
c
n
token = encode(account.id)
token = Account.encode(account.id)
token = encode(account.id)
Account.encode(account.id)
token = encode(account.id)
n
c
token = encode(account.id)
token = Account.encode(account.id)
 Account.encode(account.id)
n
account.save
n
account = Account.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:password])
c
Account.encode(account.id)
encode(account.id)
token = encode(account.id)
token = Account.encode(account.id)
n
account.save
n
account = Account.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:password])
c
email
find_by(email: email)
account.present? && account.password == password
n
account = Account.find_by(email: email)
Account.find_by(email: email)
account = Account.find_by(email: email)
n
password = params[:data][:attributes][:password]
n
email = params[:data][:attributes][:email].downcase
c
account.present? && account.password == password
n
Account.find_by(email: email)
n
c
token = Account.encode(account.id)
Account.encode(account.id)
n
account = Account.find_by(email: email)
n
c
Account.encode(account.id)
      token = Account.encode(account.id)
token = encode(account.id)
encode(account.id)
n
account.present? && account.password == password
account = Account.find_by(email: email)
n
account = Account.find_by(email: email)
n
c
n
c
exception
n
c
n
account
n
c
Account.new
account.new
Account.new
Account.find_by(email: email)
account = Account.find_by(email: email)
n
password = params[:data][:attributes][:password]
email = params[:data][:attributes][:email].downcase
c
Account.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:password])
c
Account.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:password])
Account.new
c
n
c
params[:data][:attributes][:password]
params
EmailAccount.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:password])
EmailAccount.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:email])
password: params[:data][:attributes][:email])
EmailAccount.new(email: params[:data][:attributes][:email].downcase
EmailAccount.new(email: params[:data]
c
n
params[:data][:attributes][:email]
params[:data][:attributes][:email])
EmailAccount.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:email])
account = EmailAccount.new(email: params[:data][:attributes][:email].downcase, password: params[:data][:attributes][:email])
c
account
account.password
n
c
n
c
account.authenticate(password)
password
n
c
n
c
account.authenticate("Rails@123")
account.authenticate("#{Rails@123}")
account.authenticate("Rails@123")
account.authenticate("$2a$12$zFYTvrAaq1a7a4d9HkxFGODI/n3CO6hdYOHjez5COibuEjsYS5XAa")
account.password_digest
account.authenticate(password)
account
n
password
email
n
c
account.authenticate(password)
account.authenticate!(password)
password
account.password_digest
account.password
account.authenticate(password)
password
n
c
n
c
account.authenticate(password)
account.authenticate(password_digest)
account.authenticate(password)
account
n
c
email
n
c
account.authenticate(password)
n
c
account.authenticate(password)
n
c
account.authenticate(password)
account.present?
account
account.present?
n
c
password
account.password
authenticate(password)
account.authenticate(password)
account && account.authenticate(password)
account
 account = EmailAccount.find_by(email: email)
 password = params[:data][:attributes][:password]
email = params[:data][:attributes][:email].downcase
n
c
account.find_by(email: email)
password
account.last
account
EmailAccount.find_by(email: email)
account = EmailAccount.find_by(email: email)
n
password = params[:data][:attributes][:password]
n
email = params[:data][:attributes][:email].downcase
n
account && account.authenticate(password)
n
c
token = encode(account.id)
n
account && account.authenticate(password)
n
c
account.present? && account.authenticate(password)
n
account = EmailAccount.find_by(email: email)
n
c
EmailAccount.last
Account.find_by(email: email).authenticate(password)
EmailAccount.find_by(email: email).authenticate(password)
EmailAccount.find_by(email: email).authenticate(password
account.authenticate(password)
n
c
BCrypt::Password.new(p)
aa = BCrypt::Password.new(p)
BCrypt::Password.new(p).password
BCrypt::Password.new(p)
Bcrypt::Password.new(p) 
Bcrypt::Password.(p) 
Bcrypt::Password.new
Bcrypt::Password.(p) 
Bcrypt::Password.new(p) 
BCrypt::Password.new(p) 
BCrypt::Password.new(p) == password
password
p = account.password_digest
BCrypt::Password.new(account.password_digest)
BCrypt::Password.new(account.password_digest) == password
BCrypt::Password.new(account.password_digest)
